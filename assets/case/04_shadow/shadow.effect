
// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    alphaThreshold: {
      type: number
      value: 0.5
    }
  }
%}

%% vs {

precision highp float;

uniform mat4 cc_matViewProj;

#if _USE_MODEL
  uniform mat4 cc_matWorld;
#endif

attribute vec3 a_position;
attribute lowp vec4 a_color;

#if USE_TEXTURE
  attribute mediump vec2 a_uv0;
  varying mediump vec2 v_uv0;
#endif

varying lowp vec4 v_color;

void main () {
  mat4 mvp;
  
  #if _USE_MODEL
    mvp = cc_matViewProj * cc_matWorld;
  #else
    mvp = cc_matViewProj;
  #endif

  #if USE_TEXTURE
    v_uv0 = a_uv0;
  #endif

  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);
}

}

%% fs {

precision highp float;

#if USE_TEXTURE
  uniform sampler2D texture;
  varying mediump vec2 v_uv0;
#endif

#include <alpha-test>
varying vec4 v_color; // vertex shader传入，setColor设置的颜色
uniform float isWhite;
  
vec4 composite(vec4 over, vec4 under)
{
  return over + (1.0 - over.a)*under;
}
vec4 getColor(vec4 color){
  if(isWhite > 0.8){
    if(color.a > 0.0){
      return vec4(1.0,1.0,1.0,1.0);
    }
    return color;
  }
  return color;
}

void main(){
  vec2 shadowOffset = vec2(-0.0, -0.08);
  vec4 textureColor = texture2D(texture,v_uv0 );
  float shadowMask = texture2D(texture,v_uv0 +shadowOffset ).a;
  const float shadowOpacity = 0.5;
  vec4 shadowColor = vec4(0.0,0.0,0.0,shadowMask*shadowOpacity);
  textureColor = getColor(textureColor);
  gl_FragColor = composite(textureColor,shadowColor);
}

}
