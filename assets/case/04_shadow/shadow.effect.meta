{
  "ver": "1.0.15",
  "uuid": "8c3e3d69-859a-456b-a16b-34e7de0db642",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\nuniform mat4 cc_matViewProj;\n\n#if _USE_MODEL\n  uniform mat4 cc_matWorld;\n#endif\n\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\n\n#if USE_TEXTURE\n  attribute mediump vec2 a_uv0;\n  varying mediump vec2 v_uv0;\n#endif\n\nvarying lowp vec4 v_color;\n\nvoid main () {\n  mat4 mvp;\n  \n  #if _USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = mvp * vec4(a_position, 1);\n}\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\n#if USE_TEXTURE\n  uniform sampler2D texture;\n  varying mediump vec2 v_uv0;\n#endif\n\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color; \nuniform float isWhite;\n  \nvec4 composite(vec4 over, vec4 under)\n{\n  return over + (1.0 - over.a)*under;\n}\nvec4 getColor(vec4 color){\n  if(isWhite > 0.8){\n    if(color.a > 0.0){\n      return vec4(1.0,1.0,1.0,1.0);\n    }\n    return color;\n  }\n  return color;\n}\n\nvoid main(){\n  vec2 shadowOffset = vec2(-0.0, -0.08);\n  vec4 textureColor = texture2D(texture,v_uv0 );\n  float shadowMask = texture2D(texture,v_uv0 +shadowOffset ).a;\n  const float shadowOpacity = 0.5;\n  vec4 shadowColor = vec4(0.0,0.0,0.0,shadowMask*shadowOpacity);\n  textureColor = getColor(textureColor);\n  gl_FragColor = composite(textureColor,shadowColor);\n}\n\n\n"
    }
  ],
  "subMetas": {}
}