
// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    alphaThreshold: {
      type: number
      value: 0.5
    }
  }
%}

%% vs {

precision highp float;

uniform mat4 cc_matViewProj;

#if _USE_MODEL
  uniform mat4 cc_matWorld;
#endif

attribute vec3 a_position;
attribute lowp vec4 a_color;

#if USE_TEXTURE
  attribute mediump vec2 a_uv0;
  varying mediump vec2 v_uv0;
#endif

varying lowp vec4 v_color;

void main () {
  mat4 mvp;
  
  #if _USE_MODEL
    mvp = cc_matViewProj * cc_matWorld;
  #else
    mvp = cc_matViewProj;
  #endif

  #if USE_TEXTURE
    v_uv0 = a_uv0;
  #endif

  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);
}

}

%% fs {

  precision highp float;

  #if USE_TEXTURE
    uniform sampler2D texture;
    varying mediump vec2 v_uv0;
  #endif

  #include <alpha-test>
  
  uniform float time;
  varying lowp vec4 v_color;

  void main () {
    // vec4 myC = texture2D(texture, vec2(v_uv0.x, v_uv0.y)); // 正在处理的这个像素点的颜色
    vec4 src_color = texture2D(texture, vec2(v_uv0.x, v_uv0.y));
    // vec4 color = v_color;
        
    // #if USE_TEXTURE
    //     color *= texture2D(texture, v_uv0);
    // #if _USE_ETC1_TEXTURE
    //     color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
    // #endif
    // #endif
    
    // ALPHA_TEST(v_color);

    float width = 0.1;       //流光的宽度范围 (调整该值改变流光的宽度)
    float start = tan(time/1.0);  //流光的起始x坐标
    float strength = 0.006;   //流光增亮强度   (调整该值改变流光的增亮强度)
    float offset = 0.25;      //偏移值         (调整该值改变流光的倾斜程度)
    if( v_uv0.x < (start - offset * v_uv0.y) &&  v_uv0.x > (start - offset * v_uv0.y - width))
    {
        vec3 improve = strength * vec3(255, 255, 255);
        vec3 result = improve * vec3( src_color.r, src_color.g, src_color.b);
        gl_FragColor = vec4(result, src_color.a);

    }else{
        gl_FragColor = src_color;
    }

    // gl_FragColor = color;
  }
}
