{
  "ver": "1.0.15",
  "uuid": "acfac1d9-a26a-43e7-a572-15b74289a7d3",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\nuniform mat4 cc_matViewProj;\n\n#if _USE_MODEL\n  uniform mat4 cc_matWorld;\n#endif\n\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\n\n#if USE_TEXTURE\n  attribute mediump vec2 a_uv0;\n  varying mediump vec2 v_uv0;\n#endif\n\nvarying lowp vec4 v_color;\n\nvoid main () {\n  mat4 mvp;\n  \n  #if _USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = mvp * vec4(a_position, 1);\n}\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\nuniform sampler2D texture;\nvarying mediump vec2 v_uv0;\n\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nconst int numbers = 1;\n\nuniform float u_time;\nuniform float aspect;\nuniform float life;\nuniform float radius;\nuniform float amp;\nuniform float band;\nuniform float waves;\nuniform float speed;\nuniform float progress;\nuniform vec2 center;\n\nvoid main() {\n    vec2 tc = v_uv0.xy;\n    vec2 uv = vec2(0.0, 0.0);\n    vec2 p;\n    float len;\n    vec2 uv_offset;\n    float wave_width = band * radius;\n\n    p = (tc - center);\n    p.x = p.x * aspect;\n    len = length(p);\n\n    float current_progress = progress / life;\n    if (current_progress > 1.0) {\n        vec4 t_image = texture2D(texture,v_uv0);\n        gl_FragColor = t_image;\n        return;\n    }\n\n    float current_radius = radius * current_progress;\n    float damp_factor = 1.0;\n    if (current_progress > .5) {\n        damp_factor = (1.0 - current_progress) * 2.0;\n    }\n\n    float cut_factor = clamp(wave_width * damp_factor - abs(current_radius - len), 0.0, 1.0);\n    float waves_factor = waves * len / radius;\n    uv_offset = (p / len) * cos((waves_factor - current_progress * speed) * 3.14) * amp * cut_factor;\n\n    uv += uv_offset;\n    \n    vec4 t_image = texture2D(texture, fract(tc + uv));\n\n    gl_FragColor = t_image;\n}\n\n\n"
    }
  ],
  "subMetas": {}
}