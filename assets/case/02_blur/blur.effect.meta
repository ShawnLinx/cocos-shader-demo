{
  "ver": "1.0.25",
  "uuid": "02afaa38-d020-4fba-a00a-588f6693bd9f",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n#if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nvarying vec4 v_color;\nuniform vec4 resolution;\nconst float blurRadius = 5.0;\nconst float sampleNum = 2.0;\nvec4 blur(vec2);\nvoid main () {\n  vec4 color = v_color;\n  #if USE_TEXTURE\n      color *= texture2D(texture, v_uv0);\n      #if _USE_ETC1_TEXTURE\n          color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n      #endif\n  #endif\n  ALPHA_TEST(v_color);\n  vec4 col = blur(v_uv0);\n  gl_FragColor = vec4(col) * color;\n}\nvec4 blur(vec2 p) {\n  if (blurRadius > 0.0 && sampleNum > 1.0) {\n    vec4 col = vec4(0.0);\n    vec2 unit = 1.0 / resolution.xy;\n    float count = 0.0;\n    for (float x = -blurRadius; x < blurRadius; x += blurRadius / sampleNum) {\n      for (float y = -blurRadius; y < blurRadius; y += blurRadius / sampleNum) {\n        float weight = (blurRadius - abs(x)) * (blurRadius - abs(y));\n        col += texture2D(texture, p + vec2(x * unit.x, y * unit.y)) * weight;\n        count += weight;\n      }\n    }\n    return col / count;\n  }\n  return texture2D(texture, p);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n#if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nin vec4 v_color;\nuniform FragConstants {\n  vec4 resolution;\n};\nconst float blurRadius = 5.0;\nconst float sampleNum = 2.0;\nvec4 blur(vec2);\nvoid main () {\n  vec4 color = v_color;\n  #if USE_TEXTURE\n      color *= texture2D(texture, v_uv0);\n      #if _USE_ETC1_TEXTURE\n          color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n      #endif\n  #endif\n  ALPHA_TEST(v_color);\n  vec4 col = blur(v_uv0);\n  gl_FragColor = vec4(col) * color;\n}\nvec4 blur(vec2 p) {\n  if (blurRadius > 0.0 && sampleNum > 1.0) {\n    vec4 col = vec4(0.0);\n    vec2 unit = 1.0 / resolution.xy;\n    float count = 0.0;\n    for (float x = -blurRadius; x < blurRadius; x += blurRadius / sampleNum) {\n      for (float y = -blurRadius; y < blurRadius; y += blurRadius / sampleNum) {\n        float weight = (blurRadius - abs(x)) * (blurRadius - abs(y));\n        col += texture2D(texture, p + vec2(x * unit.x, y * unit.y)) * weight;\n        count += weight;\n      }\n    }\n    return col / count;\n  }\n  return texture2D(texture, p);\n}"
      }
    }
  ],
  "subMetas": {}
}